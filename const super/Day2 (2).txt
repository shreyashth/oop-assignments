Any programming language which supports only class and objects is called object based programming language 

Any programming language which supports only class ,objects.polymorphism,inheritence is called object oriented programming 
language 

for loop is best option when we know the exact iteration(start point and the end point means we know exactly how many 
times loop has to be repeated)

whie loop is the best option when we don't  known the exact reptition but we know till condition is true program has to 
repeat the code. and if conditon is not true it should not go inside the loop body


do while is the best option when we want to execute the code inside the loop body atleast once if condition is false
for the first time and come out of the loop body. And second time onwards control should go inside the loop if condition
is true and and execute code inside the loop body till condition is true.


An example of while loop

package demopack;

public class whileeg {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
int i=1;
while(i<=5) {
	System.out.println(i);
	i++;
}
	}

}
1
2
3
4
5

work flow of while loop

Step 1 intialization of a loop counter (i=1)

Step 2 checking the condition of a loop counter(i<=5) if condition is true it will go inside the loop body

Step 3 Printing the value (i=1)

step 4 increment of the loop counter(i++ i=2)

step 5 control moves to the condition of the loop counter(i<=5 now i=2) so condition is true so goes inside loop body

step 6 repeating step from 3 to 5 till condition becomes false



Assignment Repeat this example using do while loop.

Objects and Classes in Java

In object-oriented programming technique we design a program using objects and classes.

An object in java is the physical as well as a logical entity whereas a class in java is a logical entity only.

What is an object in java
An entity that has state and behaviour is known as an object. eg chair ,bike,pen etc
IT can be physical of logical(tangible and intangible. The example of intangible object is the banking system.

An object has three characteristic
Behavior : represents the behaviour of an object such as deposit,withdraw etc

state : represents the data(value) of an object. For eg Pen is an object its name is reynolds,color is white known as its state

Identity : An object identity is typically implemented via a unique ID. The value of the ID is not visible to the 
           external user. However it is used internally by the JVM to identify the each object uniquely.

An object is an instance of a class. A class is a template or blueprint from which objects are created. So object 
is the instance(result) of a class.

Object definitions
An object is a real world entity

An object is a runtime entity

The object is an entity which has state and behavior

The object is an instance of a class

What is class in java
A class is a group of objects which have common properties.  It is a template or blueprint from which objects are 
created. It is alogical entity. It can't be physical

A class in java can contain
Fields
Methods
Constructors
Blocks
Nested class and interface 

Instance variable in java
A variable which is created inside the class but outside the the method is known as an instance
variable. Instance variable doesn't get memory at compile time. It get memory at runtime when object or instance is 
created. Thas is why it is called instance variable

Method in java
In java a method is like a function which is used to expose the  behavior of an object'

Advantage of method

code reusability

Code optimization

new keyword in java
The new keyword is used to allocate memory at runtime. All objects get memory in Heap memory area.

Java program to illustrate  how to define a class and object

package demopack;

public class Student {
int id;//field,data member, instance variable
String name;
	public static void main(String[] args) {
	Student s= new Student();//s is a reference variable
	System.out.println(s.id);
	System.out.println(s.name);

	}

}
0
null

Note default value of int is 0 (instance variable)
     default value of String is null (instance variable)


package demopack;
class Student1 {
	int id;
	String name;
}
public class TestStudent {

	public static void main(String[] args) {
		Student1 s = new Student1();
		System.out.println(s.id);
		System.out.println(s.name);
	}

}
0
null

Note In java in one file we can have only one public class.

package demopack;
class Student1 {
	int id=101;
	String name="Reena";
}
public class TestStudent {

	public static void main(String[] args) {
		Student1 s = new Student1();
		System.out.println(s.id);
		System.out.println(s.name);
	}

}
101
Reena

We can initialize object in 3 ways(initialize means storing the value in object)

1 By reference

2 By Method

3 By Constructor

An example to initialize the object by reference variable
package demopack;
class Student1 {
	int id;
	String name;
}
public class TestStudent {

	public static void main(String[] args) {
		Student1 s = new Student1();
		s.id=102;
		s.name="Anil";
		System.out.println(s.id);
		System.out.println(s.name);
	}

}
102
Anil

package demopack;
class Student1 {
	int id;
	String name;
}
public class TestStudent {

	public static void main(String[] args) {
		Student1 s = new Student1();
		Student1 s1 = new Student1();
		Student1 s2 = new Student1();
		s.id=102;
		s.name="Anil";
		s1.id=201;
		s1.name="Amit";
		s2.id=202;
		s2.name="Leena";
		System.out.println(s.id);
		System.out.println(s.name);
		System.out.println(s1.id);
		System.out.println(s1.name);
		System.out.println(s2.id);
		System.out.println(s2.name);
	}

}
102
Anil
201
Amit
202
Leena


An example to initialize the object by method

package demopack;
class Student2{
	int id ;
	String name;
	
	void insertRecord(int i,String n) {
		id=i;
		name=n;
	}
	void display() {
		System.out.println(id+" "+name);
	}
}
public class TestStudent1 {

	public static void main(String[] args) {
		
		Student2 s1=new Student2();
		s1.insertRecord(301,"Tom");
		s1.display();
	}

}
301 Tom


An Example to initialize the object by constructor

package demopack;

public class Student3 {
	int id;
	String name;
	Student3(int i,String n){
		id=i;
		name=n;
	}
	
	void display() {
		System.out.println(id+" "+name);
		
	}

	public static void main(String[] args) {
		Student3 s1=new Student3(401,"Seema");
		s1.display();

	}

}
401 Seema

Constructor in Java
In java a constructor is a block of codes similar to the method. It is called when an instance of the class is created.
A the time of calling constructor, memory for the object is allocated in the memory.

It is a special type of method which is used to initialize the object.

Every time an object is created using the new keyword at least one constructor is called.

It calls default constructor if there is no constructor available in the class. In such case java compiler provides a default
constructor by default.

There are two types of constructor in java
1 no-arg constructor(default constructor)
2 parameterized constructor

Note : it is called constructor because it constructs the values at the time of object creation. It is not necessary
to write a constructor for a class. IT is because java compiler creates a default constructor  if your class doesn't
have any.


Rules for  creating java constructor 
1 constructor name must be the same as its class name

2 A constructor must have no explicit return type

3 A java constructor cannot be abstract,static,final and synchronized

4 Constructor should not be inherited

Note : We can use access modifiers while declaring a constructor. It controls the object creation.We can have private,
protected,public or default constructor in java.


an example of default constructor

package demopack;

public class Bike1 {
	Bike1(){
		System.out.println("Bike created");
	}

	public static void main(String[] args) {
		Bike1 b1=new Bike1();
		

	}

}
Bike created


An Example of paraterized constructor
package demopack;

public class Student3 {
	int id;
	String name;
	Student3(int i,String n){
		id=i;
		name=n;
	}
	
	void display() {
		System.out.println(id+" "+name);
		
	}

	public static void main(String[] args) {
		Student3 s1=new Student3(401,"Seema");
		s1.display();

	}

}
401 Seema

An example for default constructor created by java compiler at the time object creation
package demopack;

public class Student5 {int id;
String name;

void display() {
	System.out.println(id+" "+name);
}

	public static void main(String[] args) {
		Student5 s1=new Student5();
		s1.display();

	}

}
0 null


Difference between java constructor and java method
1 A constructor is used to initialize the state of an object
  A method is used to expose the behavior of an object

2 A constructor must not have a return type
  A method must have a return type

3 The constructor is invoked impicitly
  The method is invoked explicitly

4 The java compiler provides  a default constructor if you don't have any constructor in a class
  The method is not provided by the compiler in any case

5 The constructor name nust mut be same as the class name
  The method name may or may not be same as class name.


There is no copy constructor in java.
There are many ways to copy the values of one object into another object in java

1 By Constructor

package demopack;

public class Student6 {
	int id;
	String name;
	Student6(int i,String n){
		id=i;
		name=n;
	}
Student6(Student6 s1){
	id=s1.id;
	name=s1.name;
}
void display() {
	System.out.println(id+" "+name);
}
	public static void main(String[] args) {
	Student6 s1=new Student6(101,"Anil");
	Student6 s2=new Student6(s1);
	s1.display();
	s2.display();

	}

}
101 Anil
101 Anil

An example copying the values without constructor

package demopack;

public class Student7 {
int id ;
String name;
Student7(int i,String n){
	id=i;
	name=n;
}
Student7() {
	
}
void display() {
	System.out.println(id+" "+name);
}
	public static void main(String[] args) {
		Student7 s1=new Student7(601,"Tim");
		Student7 s2=new Student7();
		s2.id=s1.id;
		s2.name=s1.name;
		s1.display();
		s2.display();
		
	}

}
601 Tim
601 Tim


Java Static keyword
The static keyword in java is used for memory management mainly. We can apply static keyword with variables,methods,
blocks and nested classes. The static keyword belongs to the class than an instance of the class.


If you declare any variable as static it is known as a static variable

the static variable can be used to refer to the common property of all objects(which is not unique for each object) for eg
the company name of employee, college name of students etc
The static variable gets memory only once in the class area at the time of class loading.

Advantage of static varible
It makes your program memory efficient(it saves memory)


An example of static variable
package demopack;

public class Student6 {
	int id;
	String name;
	static String college="ITS";
	Student6(int i,String n){
		id=i;
		name=n;
	}
Student6(Student6 s1){
	id=s1.id;
	name=s1.name;
}
void display() {
	System.out.println(id+" "+name+" "+college);
}
	public static void main(String[] args) {
	Student6 s1=new Student6(101,"Anil");
	Student6 s2=new Student6(102,"Shree");
	s1.display();
	s2.display();

	}

}
101 Anil ITS
102 Shree ITS

An example of static variable
package demopack;

public class Counter {
	static int count=0;//will get memory only once and retain its value
	Counter(){
		count++; incrementing the value of static variable
		System.out.println(count);
	}

	public static void main(String[] args) {

Counter c1=new Counter();
Counter c2=new Counter();
Counter c3=new Counter();

	}

}
1
2
3


package demopack;

public class Counter {
	int count=0;//instance variable so memory allocated each time when object is created and do not retain previous value
	Counter(){
		count++;
		System.out.println(count);
	}

	public static void main(String[] args) {

Counter c1=new Counter();
Counter c2=new Counter();
Counter c3=new Counter();

	}

}
1
1
1

Java static method

If you apply static keyword with any method it is known as static method

A static method belongs to the class rather than the object of a class

A static method can be invoked without the need for crreating an instance of a class

A static method can access static data member and can change the value of it

An example of static method

package demopack;

class Student81{
	int id;
	String name;
	static String college="ITS";
	static void change() {
		college="BBDIT";
	}
	Student81(int i ,String n){
		id=i;
		name=n;
		
	}
	void display() {
		System.out.println(id+" "+name+" "+college);
	}
	

}

public class TestStudent7 {

	public static void main(String[] args) {
		Student81.change();
		Student81 s1=new Student81(101,"Sony");
		Student81 s2=new Student81(102,"tony");
		s1.display();
		s2.display();

	}

}
101 Sony BBDIT
102 tony BBDIT

An example of static method
package demopack;

public class Calculate3 {
	static int cube(int x) {
		return x*x*x;
	}

	public static void main(String[] args) {
		int result=Calculate3.cube(5);
		System.out.println(result);
		
	}

}
125

Restriction for the static method
There are two main restrictions for the static method.
1 The static method cannot use non static data member or call non-static method directly.

2 this and super cannot be used in static context

package demopack;

public class B {
int a=40;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
System.out.println(a);compile time error
	}

}


Why is the java main method static
IT is because the object is not required to call a static method. If it were anon static method, JVM create an object
first then call main() method that will lead the problem of extra memory allocation.


Java Static Block

is used to initialize the static data member

it is executed before the main the main method at the time of classloading

an example of static block
package demopack;

public class C2 {
	static { System.out.println("Static block is invoked");}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
System.out.println("Hello Main");
	}

}
Static block is invoked
Hello Main

Can we execute a program without main() method
No , one of the ways was the static block but it was possible till JDK 1.6 Since JDK 1.7 it is not possible to execute a java
class without the main method

package demopack;

public class C2 {
	static { System.out.println("Static block is invoked");}


System.exit(0);
	

}
Error: Main method not found in class demopack.C2, please define the main method as:
   public static void main(String[] args)
or a JavaFX application class must extend javafx.application.Application


this keyword in java

usage of java this keyword

1 this can be used to refer current class instance variable

2 this can be used to invoke current class method (implicitly)

3 this() can be used to invoke current class constructor

4 this can be passed as an agrument in the method call

5 this can be passed as agrument in the constructor call

6 this can be used to return the current class instance from the method.


An example of this keyword
package demopack;

class Student81{
	int id;
	String name;
	static String college="ITS";
	static void change() {
		college="BBDIT";
	}
	Student81(int id ,String name){
		this.id=id;
		this.name=name;
		
	}
	void display() {
		System.out.println(id+" "+name+" "+college);
	}
	

}

public class TestStudent7 {

	public static void main(String[] args) {
		Student81.change();
		Student81 s1=new Student81(101,"Sony");
		Student81 s2=new Student81(102,"tony");
		s1.display();
		s2.display();

	}

}
101 Sony BBDIT
102 tony BBDIT

package demopack;
class Student2{
	int id ;
	String name;
	
	void insertRecord(int id,String name) {
		this.id=id;
		this.name=name;
	}
	void display() {
		System.out.println(id+" "+name);
	}
}
public class TestStudent1 {

	public static void main(String[] args) {
		
		Student2 s1=new Student2();
		s1.insertRecord(301,"Tom");
		s1.display();
	}

}
301 Tom


Inheritance in Java
is a mechanism in which one object acquires all the properties and behaviors of a parent object. It is am impportant 
part of OOPL.

The idea behind inheritance in java is that you can create new classes that are built upon existing classes. When you
inherit from an existing class you can reuse methods and fields of the parent class. Moreover you can add new methods and 
fields in your current class also.

Inheritance represents the IS-A relationship which is also known as a parent-child relationship.

Syntax of java inheritance

class Subclass-name extends Superclass-name
{

//methods and fields

}


An example of inheritance

package demopack;
class Employee{
	float salary=40000;
}
public class Programmer extends Employee {
int bonus=10000;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Programmer p =new Programmer();
		System.out.println("Programmer salary = "+p.salary);
		System.out.println("Programmer bonus= "+p.bonus);


	}

}
Programmer salary = 40000.0
Programmer bonus= 10000


Types of inheritance in java
On the basis of class there can be three types of inheritence in java
Single level
Multilevel
Hierarchical level

In java programming multple and hybrid inheritance is not supported through class but it is supported through interface.

An example of single level inheritance
package demopack;
class Animal{
	void eat() {
		System.out.println("eating");
	}
}
class Dog extends Animal{
	void bark() {
		System.out.println("barking");
	}
}
public class TestInheritance {

	public static void main(String[] args) {
		Dog d= new Dog();
d.bark();
d.eat();
	}

}
barking
eating


An example of multilevel inheritance 
package demopack;
class Animal{
	void eat() {
		System.out.println("eating");
	}
}
class Dog extends Animal{
	void bark() {
		System.out.println("barking");
	}
}
class BabyDog extends Dog{
	void weep() {
		System.out.println("weeping");
	}
}
public class TestInheritance {

	public static void main(String[] args) {
		//Dog d= new Dog();
		BabyDog d=new BabyDog();
d.bark();
d.eat();
d.weep();
	}

}

barking
eating
weeping

An example of hierarchical inheritance
package demopack;
class Animal{
	void eat() {
		System.out.println("eating");
	}
}
class Dog extends Animal{
	void bark() {
		System.out.println("barking");
	}
}
class Cat extends Animal{
	void meow() {
		System.out.println("Meowing");
	}
}

public class TestInheritance6 {

	public static void main(String[] args) {
	Cat c= new Cat();
	c.meow();
	c.eat();
	//c.bark();

	}

}
Meowing
eating

An example to show that multiple inheritance is not supported in java through class

package demopack;
class A{
	void msg() {
		System.out.println("Hello");
	}
}
class B{
	void msg() {
		System.out.println("welcome");
	}
}
public class C extends A,B{

	public static void main(String[] args) {
		// TODO Auto-generated method stub
C obj -new C();
obj.msg();
	}

}


In Java total their are 12 modifiers out of which 4 are access modifiers

Access modifiers are private,default,protected,public

Private members in java can be accesed within the class only

Default members in java can be accessed within the package

Protected members in java can be accessed within the package as well child class can access the parent members outside
the package

Public members in java can be accessed within the package as well outside the paackage(from anywhere)


An example child class accessing the members of the parent class outside the package

package project1;

public class Parent {
protected	void run() {
		System.out.println("Parent is running");
	}

}

package demopack;
import project1.Parent;
public class Child extends Parent {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
Child c =new Child();
c.run();
	}

}
Parent is running

package demopack;
import project1.Parent;
public class Child extends Parent {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
Child c =new Child();
Parent p= new Parent();
Parent p1 =new Child();


c.run();
//p.run();compile time  error
//p1.run(); compile time error
	}

}


Method Overloading in Java
If  a class has multiple methods having same name but different in parameters it is known as Method Overloading

If we have to perform only one operation having same name of the methods increases the readability of the program.

Suppose you have to perfrom addition of the given numbers but there can be any number of agruments, if you write the
method such as a(int,int) for two parameters and b(int,int,int) for three parameters hen it may be diffcult for you
as well as other programmers to understand the behavior of the method because it name differs

advantage of method overloading
Method overloading increases the readability of the program.

There are two ways to overload the method in java
1 By changing number of agruments

2 By changing the data type


Note : In java method overloading is not  possible by changing the return type of the method only

An example of method overloading by changing the number of agruments

package demopack;
class Adder{
	static int add(int a,int b) {
		return a+b;
	}
	static int add( int a ,int b,int c) {
		return a+b+c;
	}
}
public class TestOverloading {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
System.out.println(Adder.add(10,20));
System.out.println(Adder.add(10,20,30));
	}

}
30
60

An example of methodloading by changing the data type
package demopack;
class Adder{
	static int add(int a,int b) {
		return a+b;
	}
	static double add( double a ,double b,double c) {
		return a+b+c;
	}
}
public class TestOverloading {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
System.out.println(Adder.add(10,20));
System.out.println(Adder.add(10.2,20.1,30.5));
	}

}
30
60.8

An example to show that just by changing return type method overloading is not possible in java it will give compile
time error

package demopack;
class Adder{
	static int add(int a,int b) {
		return a+b;
	}
	static double add( int a ,int b) {
		return a+b;
	}
}
public class TestOverloading {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
System.out.println(Adder.add(10,20));
System.out.println(Adder.add(10,40));
	}

}


Method overriding in java

If subclass(child class) has the same method as declared in the parent class it is known as method overriding in java

If a subclass provides the specific implementation of the method that has been declared by one of its parent class it
is known as method overriding

Usage of java method overriding

1 Method overriding is used to provide the specific implementation of a method which is already provided by its
superclass

2 Method overriding is used for runtime polymorphism

Rules for java Method overriding

1 The Method must have the same name parameter as in the parent class

2 The method must have the same name as in the parent class

3 There must be an IS-A relationship(inheritance)

package demopack;
class Vehicle{
	void run() {
		System.out.println("Vehicle is running");
	}
}

public class Bike9 extends Vehicle {
	

	public static void main(String[] args) {
		Bike9 b =new Bike9();
		b.run();

	}

}
Vehicle is running

An example for overriding a method by child class

package demopack;
class Vehicle{
	void run() {
		System.out.println("Vehicle is running");
	}
}

public class Bike9 extends Vehicle {
	
void run() {
	System.out.println("Bike is running");
}
	public static void main(String[] args) {
		Bike9 b =new Bike9();
		b.run();

	}

}
Bike is running

An example for overriding a method by child class(hierarchical inheritance)
package demopack;
class Bank{
	int getRateOfInterest() {
		return 0;
	}
}
class SBI extends Bank{
	int getRateOfInterest() {
		return 8;
	}
}
class ICICI extends Bank{
	int getRateOfInterest() {
		return 9;
	}
}
class Axis extends Bank{
	int getRateOfInterest() {
		return 10;
	}
}
public class Test2 {

	public static void main(String[] args) {
		SBI s =new SBI();
		ICICI i=new ICICI();
		Axis a= new Axis();
		System.out.println("SBI Rate of Interest = "+s.getRateOfInterest());
		System.out.println("ICICI Rate of Interest = "+i.getRateOfInterest());
		System.out.println("Axis Rate of Interest = "+a.getRateOfInterest());
	}

}
SBI Rate of Interest = 8
ICICI Rate of Interest = 9
Axis Rate of Interest = 10


